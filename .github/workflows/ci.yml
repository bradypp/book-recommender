name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Lint and format check
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd services/api-gateway && npm ci
          cd ../user-service && npm ci
          cd ../book-service && npm ci
          cd ../review-service && npm ci
          cd ../notification-service && npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check code formatting
        run: npm run format:check

  # Test Node.js services
  test-node-services:
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bookmatch_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017

      redis:
        image: redis:6.0
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd services/api-gateway && npm ci
          cd ../user-service && npm ci
          cd ../book-service && npm ci
          cd ../review-service && npm ci
          cd ../notification-service && npm ci

      - name: Run database migrations
        run: npm run migrate:test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bookmatch_test

      - name: Test API Gateway
        run: cd services/api-gateway && npm test
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bookmatch_test
          MONGODB_URL: mongodb://localhost:27017/bookmatch_test
          REDIS_URL: redis://localhost:6379

      - name: Test User Service
        run: cd services/user-service && npm test
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bookmatch_test
          MONGODB_URL: mongodb://localhost:27017/bookmatch_test
          REDIS_URL: redis://localhost:6379

      - name: Test Book Service
        run: cd services/book-service && npm test
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bookmatch_test
          REDIS_URL: redis://localhost:6379

      - name: Test Review Service
        run: cd services/review-service && npm test
        env:
          NODE_ENV: test
          MONGODB_URL: mongodb://localhost:27017/bookmatch_test
          REDIS_URL: redis://localhost:6379

      - name: Test Notification Service
        run: cd services/notification-service && npm test
        env:
          NODE_ENV: test
          MONGODB_URL: mongodb://localhost:27017/bookmatch_test
          REDIS_URL: redis://localhost:6379

  # Test Python recommendation service
  test-recommendation-service:
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bookmatch_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:6.0
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        run: |
          cd services/recommendation-service
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run Python tests
        run: cd services/recommendation-service && python -m pytest
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bookmatch_test
          REDIS_URL: redis://localhost:6379

  # Integration tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [test-node-services, test-recommendation-service]

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bookmatch_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017

      redis:
        image: redis:6.0
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          cd services/api-gateway && npm ci
          cd ../user-service && npm ci
          cd ../book-service && npm ci
          cd ../review-service && npm ci
          cd ../notification-service && npm ci
          cd ../recommendation-service && pip install -r requirements.txt

      - name: Start services
        run: |
          npm run start:test &
          sleep 30

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bookmatch_test
          MONGODB_URL: mongodb://localhost:27017/bookmatch_test
          REDIS_URL: redis://localhost:6379

  # Security scanning
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build Docker images
  build:
    runs-on: ubuntu-latest
    needs: [test-node-services, test-recommendation-service]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API Gateway image
        uses: docker/build-push-action@v5
        with:
          context: ./services/api-gateway
          push: false
          tags: bookmatch/api-gateway:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build User Service image
        uses: docker/build-push-action@v5
        with:
          context: ./services/user-service
          push: false
          tags: bookmatch/user-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Book Service image
        uses: docker/build-push-action@v5
        with:
          context: ./services/book-service
          push: false
          tags: bookmatch/book-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Recommendation Service image
        uses: docker/build-push-action@v5
        with:
          context: ./services/recommendation-service
          push: false
          tags: bookmatch/recommendation-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Review Service image
        uses: docker/build-push-action@v5
        with:
          context: ./services/review-service
          push: false
          tags: bookmatch/review-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Notification Service image
        uses: docker/build-push-action@v5
        with:
          context: ./services/notification-service
          push: false
          tags: bookmatch/notification-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
