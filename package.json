{
  "name": "bookmatch",
  "version": "1.0.0",
  "description": "AI-Powered Book Recommendation System",
  "private": true,
  "scripts": {
    "dev": "concurrently \"npm run dev:api-gateway\" \"npm run dev:user-service\" \"npm run dev:book-service\" \"npm run dev:review-service\" \"npm run dev:notification-service\" \"npm run dev:recommendation-service\"",
    "dev:api-gateway": "cd services/api-gateway && npm run dev",
    "dev:user-service": "cd services/user-service && npm run dev",
    "dev:book-service": "cd services/book-service && npm run dev",
    "dev:review-service": "cd services/review-service && npm run dev",
    "dev:notification-service": "cd services/notification-service && npm run dev",
    "dev:recommendation-service": "cd services/recommendation-service && python -m uvicorn main:app --reload --port 8000",
    "start": "concurrently \"npm run start:api-gateway\" \"npm run start:user-service\" \"npm run start:book-service\" \"npm run start:review-service\" \"npm run start:notification-service\" \"npm run start:recommendation-service\"",
    "start:api-gateway": "cd services/api-gateway && npm start",
    "start:user-service": "cd services/user-service && npm start",
    "start:book-service": "cd services/book-service && npm start",
    "start:review-service": "cd services/review-service && npm start",
    "start:notification-service": "cd services/notification-service && npm start",
    "start:recommendation-service": "cd services/recommendation-service && python -m uvicorn main:app --port 8000",
    "start:test": "NODE_ENV=test concurrently \"npm run start:api-gateway\" \"npm run start:user-service\" \"npm run start:book-service\" \"npm run start:review-service\" \"npm run start:notification-service\" \"npm run start:recommendation-service\"",
    "test": "npm run test:services && npm run test:integration",
    "test:services": "concurrently \"npm run test:api-gateway\" \"npm run test:user-service\" \"npm run test:book-service\" \"npm run test:review-service\" \"npm run test:notification-service\" \"npm run test:recommendation-service\"",
    "test:api-gateway": "cd services/api-gateway && npm test",
    "test:user-service": "cd services/user-service && npm test",
    "test:book-service": "cd services/book-service && npm test",
    "test:review-service": "cd services/review-service && npm test",
    "test:notification-service": "cd services/notification-service && npm test",
    "test:recommendation-service": "cd services/recommendation-service && python -m pytest",
    "test:integration": "jest --config=jest.integration.config.js",
    "lint": "concurrently \"npm run lint:js\" \"npm run lint:python\"",
    "lint:js": "eslint services/*/src/**/*.js services/*/src/**/*.ts --fix",
    "lint:python": "cd services/recommendation-service && flake8 . && black --check .",
    "format": "concurrently \"npm run format:js\" \"npm run format:python\"",
    "format:js": "prettier --write services/*/src/**/*.{js,ts,json}",
    "format:python": "cd services/recommendation-service && black .",
    "format:check": "concurrently \"npm run format:check:js\" \"npm run format:check:python\"",
    "format:check:js": "prettier --check services/*/src/**/*.{js,ts,json}",
    "format:check:python": "cd services/recommendation-service && black --check .",
    "migrate": "concurrently \"npm run migrate:postgres\" \"npm run migrate:mongodb\"",
    "migrate:postgres": "cd services/book-service && npm run migrate",
    "migrate:mongodb": "cd services/user-service && npm run migrate",
    "migrate:test": "NODE_ENV=test npm run migrate",
    "docker:build": "docker-compose -f infrastructure/docker/docker-compose.yml build",
    "docker:up": "docker-compose -f infrastructure/docker/docker-compose.yml up -d",
    "docker:down": "docker-compose -f infrastructure/docker/docker-compose.yml down",
    "docker:dev": "docker-compose -f infrastructure/docker/docker-compose.dev.yml up -d",
    "k8s:deploy": "kubectl apply -f infrastructure/kubernetes/",
    "k8s:delete": "kubectl delete -f infrastructure/kubernetes/",
    "install:all": "npm ci && npm run install:services",
    "install:services": "concurrently \"cd services/api-gateway && npm ci\" \"cd services/user-service && npm ci\" \"cd services/book-service && npm ci\" \"cd services/review-service && npm ci\" \"cd services/notification-service && npm ci\" \"cd services/recommendation-service && pip install -r requirements.txt\"",
    "clean": "concurrently \"npm run clean:node\" \"npm run clean:python\"",
    "clean:node": "find . -name node_modules -type d -exec rm -rf {} + 2>/dev/null || true",
    "clean:python": "find . -name __pycache__ -type d -exec rm -rf {} + 2>/dev/null || true",
    "health": "curl -f http://localhost:3000/health && echo 'API Gateway: OK'",
    "logs": "docker-compose -f infrastructure/docker/docker-compose.yml logs -f",
    "backup": "npm run backup:postgres && npm run backup:mongodb",
    "backup:postgres": "pg_dump $DATABASE_URL > backups/postgres_$(date +%Y%m%d_%H%M%S).sql",
    "backup:mongodb": "mongodump --uri $MONGODB_URL --out backups/mongodb_$(date +%Y%m%d_%H%M%S)"
  },
  "workspaces": [
    "services/*"
  ],
  "devDependencies": {
    "@types/jest": "^29.5.5",
    "@types/node": "^20.6.0",
    "@typescript-eslint/eslint-plugin": "^6.7.0",
    "@typescript-eslint/parser": "^6.7.0",
    "concurrently": "^8.2.1",
    "eslint": "^8.49.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.0",
    "jest": "^29.7.0",
    "prettier": "^3.0.3",
    "supertest": "^6.3.3",
    "typescript": "^5.2.2"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/your-org/book-recommender.git"
  },
  "keywords": [
    "book-recommendations",
    "ai",
    "machine-learning",
    "microservices",
    "nodejs",
    "python",
    "react",
    "nextjs"
  ],
  "author": "BookMatch Team",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/your-org/book-recommender/issues"
  },
  "homepage": "https://github.com/your-org/book-recommender#readme"
}
